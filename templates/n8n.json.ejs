{
  "name": "<%= name %> – <%= agent_name %> (Demo)",
  "nodes": [
    {
      "parameters": {
        "functionCode": "// Emits two upcoming appointments for the demo based on scenario\nreturn [{\n  json: {\n    scenario_id: \"<%= scenario_id %>\",\n    appointments: [\n      { id:\"A1001\", first:\"Sara\",  last:\"L.\", email:\"sara@example.com\",  time:\"2025-10-02T10:00\", doctor:\"Dr. Lee\", confirmed:false },\n      { id:\"A1002\", first:\"Marco\", last:\"T.\", email:\"marco@example.com\", time:\"2025-10-02T11:30\", doctor:\"Dr. Chen\", confirmed:false }\n    ]\n  }\n}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-800, -20],
      "name": "Load Appointments"
    },
    {
      "parameters": {
        "functionCode": "// Build message from the first appointment\nconst appt = items[0].json.appointments[0];\nconst d = new Date(appt.time);\nconst dateStr = d.toLocaleDateString();\nconst timeStr = d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});\nreturn [{ json: {\n  to: appt.email,\n  subject: \"Appointment reminder\",\n  text: `Hi ${appt.first}, your appointment is on ${dateStr} at ${timeStr} with ${appt.doctor}.\\nReply 1 to CONFIRM, 2 to RESCHEDULE, 3 to CANCEL.`,\n  meta: { scenario_id: $json.scenario_id }\n}}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-480, -20],
      "name": "Compose Message"
    },
    {
      "parameters": {
        "fromEmail": "",
        "toEmail": "={{$json[\"to\"]}}",
        "subject": "={{$json[\"subject\"]}}",
        "text": "={{$json[\"text\"]}}"
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [-160, -20],
      "name": "Email Send",
      "notes": "Select SMTP credentials after import (Gmail app-password works)."
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [160, -20],
      "name": "Wait for Reply",
      "notes": "Click Resume to simulate a reply."
    },
    {
      "parameters": {
        "functionCode": "// Simulate a reply; change replyText to test flows\nconst replyText = \"1\"; // 1=CONFIRM, 2=RESCHEDULE, 3=CANCEL, or any sentence\nlet intent = \"HUMAN\";\nconst t = replyText.toLowerCase();\nif (t === \"1\" || t.includes(\"yes\") || t.includes(\"confirm\")) intent = \"CONFIRM\";\nelse if (t === \"3\" || t.includes(\"cancel\")) intent = \"CANCEL\";\nelse if (t === \"2\" || t.includes(\"reschedule\") || t.includes(\"another\") || t.includes(\"next week\")) intent = \"RESCHEDULE\";\nelse if (t.includes(\"late\")) intent = \"LATE\";\nreturn [{ json: { intent } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [480, -20],
      "name": "Parse Intent (Demo)"
    },
    {
      "parameters": {
        "functionCode": "// Mock PMS write-back per intent\nconst intent = $json.intent;\nconsole.log('PMS update →', intent);\nreturn [{ json: { updated: true, intent } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [800, -20],
      "name": "Update PMS (Mock)"
    },
    {
      "parameters": {
        "functionCode": "// If slot freed, pick top of waitlist (demo)\nconst intent = $json.intent;\nif (intent === 'CANCEL' || intent === 'RESCHEDULE') {\n  const next = { first:'Lena', last:'K.', email:'lena@example.com', priority: 9 };\n  console.log('Waitlist backfill →', next);\n  return [{ json: { filledWith: next, intent } }];\n}\nreturn [{ json: { skipped: true, intent } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1120, -20],
      "name": "Fill Slot (Mock)"
    }
  ],
  "connections": {
    "Load Appointments": { "main": [[{ "node": "Compose Message", "type": "main", "index": 0 }]] },
    "Compose Message":   { "main": [[{ "node": "Email Send",     "type": "main", "index": 0 }]] },
    "Email Send":        { "main": [[{ "node": "Wait for Reply",  "type": "main", "index": 0 }]] },
    "Wait for Reply":    { "main": [[{ "node": "Parse Intent (Demo)", "type": "main", "index": 0 }]] },
    "Parse Intent (Demo)": { "main": [[{ "node": "Update PMS (Mock)", "type": "main", "index": 0 }]] },
    "Update PMS (Mock)":   { "main": [[{ "node": "Fill Slot (Mock)",   "type": "main", "index": 0 }]] }
  },
  "active": false,
  "settings": {},
  "staticData": null,
  "pinData": {}
}
