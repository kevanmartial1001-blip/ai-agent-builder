{
  "name": "<%= scenario_id %> – <%= agent_name %> (Demo)",
  "nodes": [
    { "parameters": {}, "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [-1600, -40], "name": "Manual Trigger" },

    <% if (reply_mode === 'imap') { %>
    {
      "parameters": { "downloadFormat": "simple", "mailbox": "INBOX", "options": {} },
      "type": "n8n-nodes-base.emailImap",
      "typeVersion": 2,
      "position": [-1600, -260],
      "name": "IMAP Email (Trigger)",
      "credentials": { "imap": { "name": "IMAP account" } }
    },
    <% } %>

    <% if (reply_mode === 'webhook') { %>
    {
      "parameters": { "httpMethod": "POST", "path": "twilio/inbound", "responseMode": "onReceived", "responseData": "allEntries" },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-1600, -260],
      "name": "Twilio Inbound"
    },
    <% } %>

    {
      "parameters": {
        "functionCode": "// Runtime config baked at generation time\nreturn [{ json: {\n  demoMode: <%= demoMode %>,\n  channel: \"<%= channel %>\",               // email | sms | whatsapp | call\n  replyMode: \"<%= reply_mode %>\",           // none | imap | webhook\n  // send only to these until you open it up\n  allowedRecipients: [\"kevanm.spain@gmail.com\"],\n  allowedPhones: [\"<%= overrideToPhone %>\"],\n  overrideTo: \"<%= overrideTo %>\",\n  overrideToPhone: \"<%= overrideToPhone %>\",\n  twilioFromSms: \"<%= twilio.fromSms %>\",\n  twilioFromWhatsApp: \"<%= twilio.fromWhatsApp %>\",\n  twilioFromVoice: \"<%= twilio.fromVoice %>\"\n}}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-1360, -40],
      "name": "Set Config"
    },

    {
      "parameters": {
        "functionCode": "// Minimal demo data from scenario\nreturn [{ json: {\n  scenario_id: \"<%= scenario_id %>\",\n  scenario_name: \"<%= name %>\",\n  agent_name: \"<%= agent_name %>\",\n  best_reply_shapes: <%- JSON.stringify(best_reply_shapes || []) %>,\n  appointments: [\n    { id: \"A1001\", first:\"Sara\", last:\"L.\", email:\"sara@example.com\", phone:\"+15551234567\", time:\"2025-10-02T10:00\", doctor:\"Dr. Lee\" }\n  ]\n}}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-1120, -40],
      "name": "Load Appointments"
    },

    {
      "parameters": {
        "functionCode": "const appt = items[0].json.appointments[0];\nconst d = new Date(appt.time);\nconst dateStr = d.toLocaleDateString();\nconst timeStr = d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});\nconst cfg = $items('Set Config',0,0).json;\nreturn [{ json: {\n  to: cfg.overrideTo || appt.email,\n  toPhone: cfg.overrideToPhone || appt.phone,\n  subject: `Appointment reminder – ${appt.doctor}`,\n  text: `Hi ${appt.first}, your appointment is on ${dateStr} at ${timeStr} with ${appt.doctor}.\\nReply 1 to CONFIRM, 2 to RESCHEDULE, 3 to CANCEL.`,\n  tts: `Hello ${appt.first}. This is a reminder for your appointment on ${dateStr} at ${timeStr} with ${appt.doctor}. Press one to confirm, two to reschedule, or three to cancel.`\n}}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-880, -40],
      "name": "Compose Message"
    },

    {
      "parameters": {
        "functionCode": "const cfg = $items('Set Config',0,0).json;\nconst to = $json.to || '';\nconst ok = (cfg.allowedRecipients||[]).includes(to);\nreturn [{ json: { ok } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-660, -140],
      "name": "Email Allowlist"
    },

    {
      "parameters": {
        "conditions": { "boolean": [ { "value1": "={{$item(0).$node['Email Allowlist'].json.ok}}" } ] }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-480, -140],
      "name": "Email Allowed?"
    },

    {
      "parameters": {
        "fromEmail": "",
        "toEmail": "={{$json['to']}}",
        "subject": "={{$json['subject']}}",
        "text": "={{$json['text']}}",
        "options": { "senderName": "<%= agent_name %>" }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [-260, -140],
      "name": "Email Send",
      "disabled": <%= channel !== 'email' %>,
      "credentials": { "smtp": { "name": "SMTP account" } }
    },

    {
      "parameters": {
        "functionCode": "const cfg = $items('Set Config',0,0).json;\nconst phone = $json.toPhone || '';\nconst ok = (cfg.allowedPhones||[]).includes(phone);\nreturn [{ json: { ok } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [-660, 40],
      "name": "Phone Allowlist"
    },

    {
      "parameters": {
        "conditions": { "boolean": [ { "value1": "={{$item(0).$node['Phone Allowlist'].json.ok}}" } ] }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-480, 40],
      "name": "Phone Allowed?"
    },

    {
      "parameters": {
        "resource": "message",
        "operation": "send",
        "from": "={{$items('Set Config',0,0).json.twilioFromSms}}",
        "to": "={{$json['toPhone']}}",
        "message": "={{$json['text']}}"
      },
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 2,
      "position": [-260, 0],
      "name": "Twilio SMS",
      "disabled": <%= channel !== 'sms' %>,
      "credentials": { "twilioApi": { "name": "twilio-default" } }
    },

    {
      "parameters": {
        "resource": "message",
        "operation": "send",
        "from": "={{$items('Set Config',0,0).json.twilioFromWhatsApp}}",
        "to": "={{'whatsapp:' + $json['toPhone']}}",
        "message": "={{$json['text']}}"
      },
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 2,
      "position": [-260, 100],
      "name": "Twilio WhatsApp",
      "disabled": <%= channel !== 'whatsapp' %>,
      "credentials": { "twilioApi": { "name": "twilio-default" } }
    },

    {
      "parameters": {
        "resource": "call",
        "operation": "create",
        "from": "={{$items('Set Config',0,0).json.twilioFromVoice}}",
        "to": "={{$json['toPhone']}}",
        "text": "={{$json['tts']}}",
        "sayOrPlay": "say"
      },
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 2,
      "position": [-260, 200],
      "name": "Twilio Call (TTS)",
      "disabled": <%= channel !== 'call' %>,
      "credentials": { "twilioApi": { "name": "twilio-default" } }
    },

    { "parameters": {}, "type": "n8n-nodes-base.wait", "typeVersion": 1, "position": [0, -40], "name": "Wait for Reply" },

    {
      "parameters": {
        "functionCode": "// Parse reply text. Webhook -> Body; IMAP -> text; Wait->Resume uses default.\nconst src = $json.Body || $json.text || \"1\"; // default '1' when simulating resume\nconst t = (src || '').toLowerCase();\nlet intent = 'HUMAN';\nif (t === '1' || /(^|\\b)yes\\b|confirm/.test(t)) intent='CONFIRM';\nelse if (t === '3' || /cancel|annuler/.test(t)) intent='CANCEL';\nelse if (t === '2' || /reschedule|another|next week|reporter|déplacer|changer/.test(t)) intent='RESCHEDULE';\nelse if (/late|retard|en retard|mins? late|minutes? de retard/.test(t)) intent='LATE';\nreturn [{ json:{ intent, raw:$json } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [240, -40],
      "name": "Parse Intent"
    },

    {
      "parameters": { "functionCode": "console.log('[PMS] Update →', $json.intent); return [{ json:{ ok:true, intent:$json.intent } }];" },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [480, -40],
      "name": "Update PMS (Mock)"
    },

    {
      "parameters": {
        "functionCode": "if ($json.intent==='CANCEL' || $json.intent==='RESCHEDULE') { const next={first:'Lena',email:'lena@example.com',phone:'+15550001111'}; console.log('[WAITLIST] Fill', next); return [{ json:{ filledWith:next, intent:$json.intent } }]; } return [{ json:{ skipped:true, intent:$json.intent } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [720, -40],
      "name": "Fill Slot (Mock)"
    }
  ],
  "connections": {
    "Manual Trigger": { "main": [[{ "node": "Set Config", "type": "main", "index": 0 }]] },
    <% if (reply_mode === 'imap') { %>
    "IMAP Email (Trigger)": { "main": [[{ "node": "Parse Intent", "type": "main", "index": 0 }]] },
    <% } %>
    <% if (reply_mode === 'webhook') { %>
    "Twilio Inbound": { "main": [[{ "node": "Parse Intent", "type": "main", "index": 0 }]] },
    <% } %>
    "Set Config": { "main": [[{ "node": "Load Appointments", "type": "main", "index": 0 }]] },
    "Load Appointments": { "main": [[{ "node": "Compose Message", "type": "main", "index": 0 }]] },
    "Compose Message": {
      "main": [
        [{ "node": "Email Allowlist", "type": "main", "index": 0 }],
        [{ "node": "Phone Allowlist", "type": "main", "index": 0 }]
      ]
    },
    "Email Allowlist": { "main": [[{ "node": "Email Allowed?", "type": "main", "index": 0 }]] },
    "Email Allowed?": {
      "main": [
        [{ "node": "Email Send", "type": "main", "index": 0 }],
        [{ "node": "Wait for Reply", "type": "main", "index": 0 }]
      ]
    },
    "Phone Allowlist": { "main": [[{ "node": "Phone Allowed?", "type": "main", "index": 0 }]] },
    "Phone Allowed?": {
      "main": [
        [{ "node": "Twilio SMS", "type": "main", "index": 0 }],
        [{ "node": "Wait for Reply", "type": "main", "index": 0 }]
      ]
    },
    "Email Send": { "main": [[{ "node": "Wait for Reply", "type": "main", "index": 0 }]] },
    "Twilio SMS": { "main": [[{ "node": "Wait for Reply", "type": "main", "index": 0 }]] },
    "Twilio WhatsApp": { "main": [[{ "node": "Wait for Reply", "type": "main", "index": 0 }]] },
    "Twilio Call (TTS)": { "main": [[{ "node": "Wait for Reply", "type": "main", "index": 0 }]] },
    "Wait for Reply": { "main": [[{ "node": "Parse Intent", "type": "main", "index": 0 }]] },
    "Parse Intent": { "main": [[{ "node": "Update PMS (Mock)", "type": "main", "index": 0 }]] },
    "Update PMS (Mock)": { "main": [[{ "node": "Fill Slot (Mock)", "type": "main", "index": 0 }]] }
  },
  "active": false,
  "settings": {},
  "staticData": null,
  "pinData": {}
}
